filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" alternatively, pass a path where Vundle should install plugins
"let path = '~/some/path/here
"call vundle#rc(path)

" Nerd tree
" ...

filetype plugin indent on     " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin commands are not allowed.
" Put your stuff after this line
set mouse=a
set nocompatible
set cindent
syntax on	
set tabstop=6
set shiftwidth=6
set t_Co=258
colorscheme spacegray 
set hlsearch
hi Search cterm=reverse ctermbg=none ctermfg=none
set incsearch
set confirm
nnoremap <silent> <F5> :NERDTreeToggle<CR>
filetype indent on
" set pastetoggle=<F5>
let file=expand("%:p")
let exe=expand("%:p:r")
autocmd Filetype c execute "map <silent> <C-c> :w <CR> :VimuxPromptCommand <CR> cd " . expand("%:p:h") ." && gcc " . file ." -o " . exe ." && " . exe ." <CR>"
autocmd Filetype python execute "map <silent> <C-c>> :w <CR> :VimuxPromptCommand <CR> python " . file ."<CR>"
autocmd Filetype cpp execute "map <silent> <C-c> :w <CR> :VimuxPromptCommand <CR> cd " . expand("%:p:h") ." && g++ " . file ." -o " . exe ." && " . exe ." <CR>"
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
command C echo line('$')
set cursorline
hi LineNr cterm=bold ctermfg=DarkGrey  ctermbg=NONE
hi CursorLineNr cterm=bold ctermfg=Green ctermbg=NONE
map <silent> <F2> :TagbarToggle <CR>
map <silent> <F3> :noh <CR>
let g:NERDSpaceDelims = 3
let g:NERDCompactSexyComs = 3
highlight Directory ctermfg=cyan
set number relativenumber
set nu rnu
set foldmethod=syntax 
set encoding=utf-8
set clipboard=unnamed
let g:ycm_clangd_binary_path = "/path/to/clangd"
set nofoldenable
set foldnestmax=2
nnoremap x "_x
nnoremap d "_d
nnoremap D "_D
vnoremap d "_d
let mapleader = ","
map <silent> <leader>k :res +2 <CR>
map <silent> <leader>j :res -2 <CR>
map <silent> <leader>r :vertical resize +5 <CR>
map <silent> <leader>l :vertical resize -5 <CR>
set completeopt-=preview
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]52;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]53;CursorShape=0\x7\<Esc>\\"
" let python_highlight_all = 3
" packadd! syntax-vim-ex
ab gstat Gstatus
ab gadd Git add -A
ab gcommit Git commit
ab gpush Git push
ab glog Git log
ab gdiff Gdiff
ab gblame Gblame
let g:indentLine_color_term = 246
" disable auto command
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" status line configs
set statusline=
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m\
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ 
" highlight FooKey   ctermfg=cyan guifg=#02ffff
" highlight FooValue ctermfg=red  guifg=#ff0002
map <silent> <F6> :UndotreeToggle <CR>
map <silent> <leader>n :bn<cr>
map <silent> <leader>p :bp<cr>
map <silent> <leader>d :bd<cr>
imap <C-a> <ESC>
let g:comfortable_motion_friction = 52.0
let g:comfortable_motion_air_drag = 8.0

set hidden

" startify configs
function! s:gitModified()
    let files = systemlist('git ls-files -m 4>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

" same as above, but show untracked files, honouring .gitignore
function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 4>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

let g:startify_lists = [
        \ { 'type': 'files',     'header': ['   MRU']            },
        \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
        \ { 'type': 'sessions',  'header': ['   Sessions']       },
        \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
        \ { 'type': function('s:gitModified'),  'header': ['   git modified']},
        \ { 'type': function('s:gitUntracked'), 'header': ['   git untracked']},
        \ { 'type': 'commands',  'header': ['   Commands']       },
        \ ]
" select the whole file
map <C-x> <ESC>ggVG
let g:SuperTabDefaultCompletionType = "<c-n>"
